
1) linear regression
from sklearn.linear_model import LinearRegression
lin_reg=LinearRegression()
lin_reg.fit(housing_prepared,housing_label)

from sklearn.metrics import mean_squared_error
housing_pred=lin_reg.predict(housing_prepared)
lin_mse=mean_squared_error(housing_label,housing_pred)
lin_rmse=np.sqrt(lin_mse)
lin_rmse

2) decision tree
from sklearn.tree import DecisionTreeRegressor
tree_reg=DecisionTreeRegressor()
tree_reg.fit(housing_prepared,housing_label)

housing_pred=tree_reg.predict(housing_prepared)
tree_mse=mean_squared_error(housing_label,housing_pred)
tree_rmse=np.sqrt(tree_mse)
tree_rmse

#cross-validation
from sklearn.model_selection import cross_val_score
tree_rmse=cross_val_score(tree_reg,housing_prepared,housing_label,
                       scoring='neg_root_mean_squared_error',
                       cv=10)

def display_scores(scores):
    print('rmse Scores:',scores)
    print('Means:',scores.mean())
    print('Std:',scores.std())

display_scores(-tree_rmse)

lin_rmse=cross_val_score(lin_reg,housing_prepared,housing_label,
                       scoring='neg_root_mean_squared_error',
                       cv=10)
display_scores(-lin_rmse)


3)random forest
from sklearn.ensemble import RandomForestRegressor
rf_reg=RandomForestRegressor()
rf_reg.fit(housing_prepared,housing_label)

rf_rmse=cross_val_score(rf_reg,housing_prepared,housing_label,
                       scoring='neg_root_mean_squared_error',
                       cv=10)
display_scores(-rf_rmse)

rf.get_params()