Python template - Regression
Goal:
1. 
2. Regression
3. Assumptions:

## 1. Import data

## 2. Explotary Data Analysis (EDA)

## 3. Prepare Data

### 3.1 Data cleaning
### 3.2 Cat Var
### 3.3 New Col
### 3.4 Feature Scaling
### 3.5 Pipelines


## 4. Modeling
### 4.1 train/test split
### 4.2 Train models
Linear/Decision tree
rmse
random forest
### 4.3 Model Evaluation

Cross-validation

GridSearchCV/RandomizedSeachCV

### 4.4 Ensemble Models

### 4.5 Feature Importance

1) Decision Tree 
from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

Y_score = model.predict_proba(X_test)[:,1]
y_pred = model.predict(X_test)

print('Decision Tree')
print('acc:', accuracy_score(Y_test, y_pred))
print('rec:', recall_score(Y_test, y_pred))
print('F1:', f1_score(Y_test, y_pred))

roccurve()

----
2) #Random Forest
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(X_train, y_train)

Y_score = model.predict_proba(X_test)[:,1]
y_pred = model.predict(X_test)

print('Random Forest')
print('acc:', accuracy_score(Y_test, y_pred))
print('rec:', recall_score(Y_test, y_pred))
print('F1:', f1_score(Y_test, y_pred))

roccurve()


----
types of Regressions?
Linear Regression
Logistic Regression
Polynomial Regression
Stepwise Regression
#Ridge Regression
from sklearn.linear_model import RidgeCV
model = Ridge()
model.fit(X_train, y_train)

#Lasso Regression
from sklearn.linear_model import LassoCV
model = LassoCV()
model.fit(X_train, y_train)

#ElasticNet Regression
from sklearn.linear_model import ElasticNetCV
model = ElasticNetCV()
model.fit(X_train, y_train)

Naive Bayes
Regression Trees and Random Forests

Simple Linear Regression
Lasso Regression
Logistic regression
Support Vector Machines
Multivariate Regression
Multiple Regression



