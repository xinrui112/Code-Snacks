Project 2: merge/missing data/correlation matrix
- merge data:
    * df=train.merge(properties,left_on='parcelid', right_on='parcelid')
    pd.merge(left, right, on="key")
- missing data:
    * index & rename:
        * missing=df.isna().sum().reset_index()
        * missing.columns=['column','count']
    * loc & sort:
        * missing= missing.loc[missing_df.count>0].sort_values(by='count')
        * ***SimpleImputer****
        
        from sklearn.impute import SimpleImputer
        housing_num=housing.drop('ocean_proximity',axis=1) #drop cat col first.

        imputer=SimpleImputer(strategy='median')
        X=imputer.fit_transform(housing_num)
        housing_tr=pd.DataFrame(X,columns=housing_num.columns)

        * set a threshold: 
            * threshold=0.97
            * missing_prop=(df.isnull().sum()/len(df)).reset_index()
            * missing_prop.columns=['field','prop']
            * missing_prop=missing_prop.sort_values(by='prop',ascending=False)
            * missing_cols=missing_prop[missing_prop.prop>=threshold].field.tolist()       
    * plot:
        * missing.plot(x="column",y="count",kind='barh',figsize=(14,14),logx=False)
    * replace values:
        * fill 0/'None'/"N/A":
            * one column:
                * df.loc[df.pooltype.isa(),'pooltype'] = 0/'None'/"N/A"
            * other columns:
                * df.loc[(df['poolcnt'] == 0), 'poolsizesum'] = 0
        * fill medium:
            * poolsize_median = df.loc[df.poolcnt > 0, 'poolsizesum'].median()
            * df.loc[(df.poolcnt>0 & df.poolsizesum.isna()),'poolsizesum']=poolsize_median
        * three values: Yes/No/0
            * df['fireplaceflag']= "No"
            * df.loc[df['fireplacecnt']>0,'fireplaceflag']= "Yes"
            * df.loc[df.fireplacecnt.isna(),'fireplacecnt'] = 0
- correlation matrix:
    * num_var: num_var=list(df_train.select_dtypes(include=np.number))
    * corr table: df[num_var].corr()
    * heatmap: 
        * plt.figure(figsize=(10,8))
        * sns.heatmap(ts.corr(),annot=True,linewidths=.5)
        * ts.corr().median_house_value.sort_values(ascending=False)
    * deal with strong correlation:
        * set dropcols:
            * dropcols=[]; dropcols.append('XXX')
            * dropcols=dropcols+missing_cols
            * df=df.drop(['parcelid','transactiondate'])
            * df=df.drop(dropcols,axis=1, inplace=True)
        
        * Q: how to set threshold vs select manually




    
    
