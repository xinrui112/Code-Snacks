Ordinalencoder/OnehotEncoder

#OrdinalEncoder
from sklearn.preprocessing import OrdinalEncoder
oe=OrdinalEncoder()
housing_cat_encoded=oe.fit_transform(housing_cat)
housing_cat_encoded
oe.categories_

#OnehotEncoder
from sklearn.preprocessing import OneHotEncoder
ohe=OneHotEncoder()
housing_cat_1hot=ohe.fit_transform(housing_cat)
housing_cat_1hot
ohe.categories_

#labelencoder
from sklearn.metrics import make_scorer
from sklearn.preprocessing import LabelBinarizer

def dcg_score(y_true, y_score, k=5):
    order = np.argsort(y_score)[::-1]
    y_true = np.take(y_true, order[:k])

    gain = 2 ** y_true - 1

    discounts = np.log2(np.arange(len(y_true)) + 2)
    return np.sum(gain / discounts)


def ndcg_score(ground_truth, predictions, k=5):
    lb = LabelBinarizer()
    lb.fit(range(len(predictions) + 1))
    T = lb.transform(ground_truth)

    scores = []

    # Iterate over each y_true and compute the DCG score
    for y_true, y_score in zip(T, predictions):
        actual = dcg_score(y_true, y_score, k)
        best = dcg_score(y_true, y_true, k)
        score = float(actual) / float(best)
        scores.append(score)

    return np.mean(scores)

----
labels_le = preprocessing.LabelEncoder()
ytrain = labels_le.fit_transform(labels)
label_map = dict(zip(labels_le.classes_, labels_le.transform(labels_le.classes_)))
