
1) linear regression
from sklearn.linear_model import LinearRegression

X=df[[col,col2,col3]]
lm=LinearRegression()
lm.fit(X,y)

yhat=lm.predict(X)

from sklearn.metrics import mean_squared_error
housing_pred=lm.predict(housing_prepared)
lm_mse=mean_squared_error(housing_label,housing_pred)
lm_rmse=np.sqrt(lm_mse)
lm_rmse

#R2
#%of var of Y is explained by the linear model.
#R2=(1-mse of regression line/MSE of the avg of the data)
  lm_score(X,y)

  sns.regplot(x='engine-size',y='price',data=df)
  plt.ylim(0,)

  sns.residplot(x='engine-size',y='price',data=df) #if constant residuals
  
  distribution plots of trian and test df
  ax1=sns.distplot(df['price'],hist=False, color='r', label='Actual value')
  sns.distplot(Yhat, color='b',label='Fitted Value',ax=ax1)


#polynomial regression
å…ˆscaler
from sklearn.preprocessing import PolynomialFeatures
pr=PolynomialFeatures(degree=2, include_bias=False)
pr.fit_transform([1,2])